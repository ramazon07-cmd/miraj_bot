import requests
from datetime import datetime
import pytz
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from keyboards.default.newkeyboards import menu, menu_rus
from keyboards.default.orderkeyboards import ordbut, delevery, checkbutton, comback, location, number, \
    ordbut_rus, number_rus, delevery_rus, checkbutton_rus, location_rus, comback_rus
from keyboards.inline.admin import adminbut
from keyboards.inline.lang import langs
from keyboards.inline.mycallbak import ordcallback
from keyboards.inline.utils import my_callback
from data.config import ADMINS
from loader import dp
from save import save_user, Create_order
from states.orderState import OrderData, RegOrderData
from utils.location import get_address_from_coords
from data.config import ADDRES

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


users = dict()


def get_lang_code(user_lang):
    return 'ru' if user_lang == 'rus' else 'uz'


@dp.message_handler(Command('start'))
async def show_menu1(message: Message):
    users[message.from_user.id] = dict()
    if message.from_user.id in ADMINS:
        await dp.bot.send_message(message.chat.id, "<b>Assalomu alaykum! Admin botga xush kelibsiz.</b>", reply_markup=ReplyKeyboardRemove(), parse_mode='HTML')
    await dp.bot.send_message(message.chat.id, "Miraj Restaurant Botga xush kelibsiz!", reply_markup=ReplyKeyboardRemove())
    await dp.bot.send_message(message.chat.id, "Tilni tanlang | –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=langs)
    if save_user(message) == 201:
        join = datetime.now(pytz.timezone('Asia/Tashkent')).strftime('%Y-%m-%d, %H:%M')
        for admin in ADMINS:
            txt = f"Yangi foydalanuvchi qo'shildi:\n" \
                f"<b>Vaqti:</b> {join}\n" \
                f"<b>User:</b> <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
            await dp.bot.send_message(admin, txt, parse_mode='HTML')


@dp.callback_query_handler(text=['uzb', 'rus'])
async def myorder(call: CallbackQuery):
    await dp.bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data == 'uzb':
        users[call.from_user.id]['lang'] = 'uzb'
        await dp.bot.send_message(call.message.chat.id, f"Assalomu alaykum {call.from_user.full_name}.",
                                  reply_markup=menu)
    elif call.data == 'rus':
        users[call.from_user.id]['lang'] = 'rus'
        await dp.bot.send_message(call.message.chat.id, f"–ü—Ä–∏–≤–µ—Ç {call.from_user.full_name}.",
                                  reply_markup=menu_rus)


@dp.message_handler(CommandStart(), state=OrderData)
async def show_menu2(message: Message, state: FSMContext):
    await state.finish()
    lang = users[message.from_user.id].get('lang', '-')
    if lang == 'rus':
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}.", reply_markup=menu_rus)
    else:
        await message.answer(f"Assalomu alaykum {message.from_user.full_name}.", reply_markup=menu)


@dp.message_handler(CommandStart(), state=RegOrderData)
async def show_menu3(message: Message, state: FSMContext):
    await state.finish()
    lang = users[message.from_user.id].get('lang', '-')
    if lang == 'rus':
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}", reply_markup=menu_rus)
    else:
        await message.answer(f"Assalomu alaykum {message.from_user.full_name}", reply_markup=menu)


@dp.message_handler(text=['üçî Buyurtma berish', 'üçî –ó–∞–∫–∞–∑–∞—Ç—å'])
async def show_menu4(message: Message):
    try:
        lang = users[message.from_user.id].get('lang', '-')
        lang_code = get_lang_code(lang)
        data = requests.get(f'{ADDRES}category/?lang={lang_code}').json()
        but = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, )
        but.add(*(KeyboardButton(text=str(num['title'])) for num in data))
        but.add(KeyboardButton(text='üè† Bosh menyu'), KeyboardButton(text='‚¨ÖÔ∏è Orqaga'))

        but_rus = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, )
        but_rus.add(*(KeyboardButton(text=str(num['title'])) for num in data))
        but_rus.add(KeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
        try:
            if lang == 'rus':
                await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=but_rus)
            else:
                await message.answer('Kategoriyalar', reply_markup=but)
            await OrderData.category.set()
        except:
            pass
    except Exception:
        pass


@dp.message_handler(text=['üì¶ Buyurtmalarim', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'])
async def Order(message: Message):
    keyboard = types.InlineKeyboardMarkup()
    data = requests.get(f'{ADDRES}order/{message.from_user.id}/').json()
    lang = users[message.from_user.id].get('lang', '-')
    try:
        if data:
            if data['page_number'] != data['count'] and data['page_number'] == 1:
                keyboard.add(types.InlineKeyboardButton(f"{data['page_number']} / {data['count']}", callback_data='0'),
                             types.InlineKeyboardButton('‚û°Ô∏è',
                                                        callback_data=ordcallback.new(num=data['page_number'] + 1)))
            elif data['page_number'] != data['count'] and data['page_number'] != 1:
                keyboard.add(
                    types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=ordcallback.new(num=data['page_number'] - 1)),
                    types.InlineKeyboardButton(f"{data['page_number']} / {data['count']}", callback_data='0'),
                    types.InlineKeyboardButton('‚û°Ô∏è', callback_data=ordcallback.new(num=data['page_number'] + 1)))
            elif data['count'] == 1:
                keyboard.add(types.InlineKeyboardButton(f"{data['page_number']} / {data['count']}", callback_data='0'))
            elif data['page_number'] == data['count']:
                keyboard.add(
                    types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=ordcallback.new(num=data['page_number'] - 1)),
                    types.InlineKeyboardButton(f"{data['page_number']} / {data['count']}", callback_data='0'))

            if lang == 'rus':
                await message.answer(f'ID: #{data["results"][0]["id"]}A\n'
                                     f'–í—Ä–µ–º—è: {data["results"][0]["created_at"]}\n'
                                     f'–¢–µ–ª–µ—Ñ–æ–Ω: {data["results"][0]["number"]}\n'
                                     f'–†–∞—Å—Ö–æ–¥—ã: {data["results"][0]["price"]}\n'
                                     f'\n–£—Å–ª–æ–≤–∏–µ: {data["results"][0]["order"]}',
                                     reply_markup=keyboard)

            else:
                await message.answer(f'ID: #{data["results"][0]["id"]}A\n'
                                     f'Vaqti: {data["results"][0]["created_at"]}\n'
                                     f'Telefon: {data["results"][0]["number"]}\n'
                                     f'Narxi: {data["results"][0]["price"]}\n'
                                     f'\nHolati: {data["results"][0]["order"]}',
                                     reply_markup=keyboard)

    except:
        if lang == 'rus':
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
        else:
            await message.answer('Sizda buyurtmalar yo\'q')


@dp.callback_query_handler(ordcallback.filter())
async def myorder(call: CallbackQuery, callback_data: dict):
    data = requests.get(f'{ADDRES}order/{call.from_user.id}/?page={callback_data.get("num")}').json()
    keyboard = types.InlineKeyboardMarkup()

    if data:
        try:
            if data['page_number'] == 1:
                keyboard.add(types.InlineKeyboardButton(f"{data['page_number']} / {data['count']}", callback_data='0'),
                             types.InlineKeyboardButton('‚û°Ô∏è',
                                                        callback_data=ordcallback.new(num=data['page_number'] + 1)))
            elif data['page_number'] != data['count'] and data['page_number'] != 1:
                keyboard.add(
                    types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=ordcallback.new(num=data['page_number'] - 1)),
                    types.InlineKeyboardButton(f"{data['page_number']} / {data['count']}", callback_data='0'),
                    types.InlineKeyboardButton('‚û°Ô∏è', callback_data=ordcallback.new(num=data['page_number'] + 1)))

            elif data['page_number'] == data['count']:
                keyboard.add(
                    types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=ordcallback.new(num=data['page_number'] - 1)),
                    types.InlineKeyboardButton(f"{data['page_number']} / {data['count']}", callback_data='0'))
            lang = users[call.from_user.id].get('lang', '-')
            if lang == 'rus':
                await dp.bot.edit_message_text(text=f'ID: #{data["results"][0]["id"]}A\n'
                                                    f'–í—Ä–µ–º—è: {data["results"][0]["created_at"]}\n'
                                                    f'–¢–µ–ª–µ—Ñ–æ–Ω: {data["results"][0]["number"]}\n'
                                                    f'–†–∞—Å—Ö–æ–¥—ã: {data["results"][0]["price"]}\n'
                                                    f'\n–£—Å–ª–æ–≤–∏–µ: {data["results"][0]["order"]}',
                                               chat_id=call.message.chat.id,
                                               message_id=call.message.message_id, reply_markup=keyboard)

            else:
                await dp.bot.edit_message_text(text=f'ID: #{data["results"][0]["id"]}A\n'
                                                    f'Vaqti: {data["results"][0]["created_at"]}\n'
                                                    f'Telefon: {data["results"][0]["number"]}\n'
                                                    f'Narxi: {data["results"][0]["price"]}\n'
                                                    f'\nHolati: {data["results"][0]["order"]}',
                                               chat_id=call.message.chat.id,
                                               message_id=call.message.message_id, reply_markup=keyboard)
        except:
            pass
    else:
        await call.answer('Sizda buyurtmalar yo\'q | –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')


@dp.message_handler(text=['‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚öô Sozlamalar'])
async def settings(message: Message):
    lang = users[message.from_user.id].get('lang', '-')
    if lang == 'rus':
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=langs)
    else:
        await message.answer("Tilni tanlang", reply_markup=langs)


@dp.message_handler(text=['üõí Korzina', 'üõí –ö–æ—Ä–∑–∏–Ω–∞'])
async def show_menu6(message: Message):
    but_uz = types.InlineKeyboardMarkup(row_width=1)
    but_ru = types.InlineKeyboardMarkup(row_width=1)
    data = requests.get(f'{ADDRES}korzina/list/{message.from_user.id}').json()
    x = 0
    txt = 'üõíSavatdagi mahsulotlarni tekshirib kiyin `Rasmiylashtirish` ni bosing!!!\n\n'
    txt_rus = 'üõí–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª!!!\n\n'

    for i in data:
        price_int = int(i["price"])
        count_int = int(i["count"])
        total_price = price_int * count_int
        
        txt += f'üîπ<b>{i["product"]}</b>\n' \
            f'{count_int} x {price_int} = {total_price:,} \n\n'.replace(',', ' ')
        x += total_price
        
        txt_rus += f'üîπ<b>{i["product"]}</b>\n' \
                f'{count_int} x {price_int} = {total_price:,} \n\n'.replace(',', ' ')

    txt += f"<b>Umumiy:</b> {x:,} so'm".replace(',', ' ')
    txt_rus += f"<b>–û–±—â–∏–π:</b> {x:,} —Å—É–º".replace(',', ' ')
    but_uz.row(*(types.InlineKeyboardButton(f'‚úñÔ∏è{i["product"]}',
                                            callback_data=my_callback.new(item=f'id_{i["id"]}')) for i in data))
    but_uz.add(types.InlineKeyboardButton('‚ôªÔ∏èTozalash', callback_data=my_callback.new(item='clear')))
    but_uz.add(types.InlineKeyboardButton('‚úÖ Rasmiylashtirish', callback_data=my_callback.new(item='order')))

    but_ru.row(*(types.InlineKeyboardButton(f'‚úñÔ∏è{i["product"]}',
                                            callback_data=my_callback.new(item=f'id_{i["id"]}')) for i in data))
    but_ru.add(types.InlineKeyboardButton('‚ôªÔ∏è–£–±–æ—Ä–∫–∞', callback_data=my_callback.new(item='clear')))
    but_ru.add(types.InlineKeyboardButton('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data=my_callback.new(item='order')))

    if data:
        lang = users[message.from_user.id].get('lang', '-')
        if lang == 'rus':
            await message.answer(txt_rus, reply_markup=but_ru, parse_mode='HTML')
        else:
            await message.answer(txt, reply_markup=but_uz, parse_mode='HTML')
    else:
        lang = users[message.from_user.id].get('lang', '-')
        lang_code = get_lang_code(lang)
        data = requests.get(f'{ADDRES}category/?lang={lang_code}').json()
        but = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, )
        but.add(*(KeyboardButton(text=str(num['title'])) for num in data))
        but.add(KeyboardButton(text='üè† Bosh menyu'), KeyboardButton(text='‚¨ÖÔ∏è Orqaga'))

        but_rus = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, )
        but_rus.add(*(KeyboardButton(text=str(num['title'])) for num in data))
        but_rus.add(KeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
        if lang == 'rus':
            await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=but_rus,
                                 reply=True)
        else:
            await message.answer('Korzina bo\'sh, Mahsulotlarni tanlang va korzinaga qo\'shing', reply_markup=but,
                                 reply=True)
        await OrderData.category.set()


@dp.callback_query_handler(my_callback.filter(item='clear'))
async def korzinaclear(call: CallbackQuery, callback_data: dict):
    requests.get(url=f'{ADDRES}korzina/clear/{call.from_user.id}')

    lang = users[call.from_user.id].get('lang', '-')
    if lang == 'rus':
        await dp.bot.edit_message_text(text='üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', chat_id=call.message.chat.id,
                                       message_id=call.message.message_id)
    else:
        await dp.bot.edit_message_text(text='üõí Korzina tozalandi', chat_id=call.message.chat.id,
                                       message_id=call.message.message_id)


@dp.callback_query_handler(my_callback.filter(item='order'))
async def order(call: CallbackQuery, callback_data: dict):
    data = requests.get(f'{ADDRES}korzina/list/{call.from_user.id}').json()
    if data:
        await dp.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        lang = users[call.from_user.id].get('lang', '-')
        if lang == 'rus':
            await dp.bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã', reply_markup=ordbut_rus)
        else:
            await dp.bot.send_message(chat_id=call.message.chat.id, text='To`lov turini tanlang', reply_markup=ordbut)
        await RegOrderData.pay.set()
    else:
        lang = users[call.from_user.id].get('lang', '-')
        if lang == 'rus':
            await call.answer(text="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        else:
            await call.answer(text="Korzina bo'sh", show_alert=True)


@dp.callback_query_handler(my_callback.filter())
async def korzina(call: CallbackQuery, callback_data: dict):
    pk = callback_data.get('item').split('_')[1]
    requests.delete(url=f'{ADDRES}korzina/delete/{pk}')
    but_uz = types.InlineKeyboardMarkup(row_width=3, )
    but_ru = types.InlineKeyboardMarkup(row_width=3, )
    data = requests.get(f'{ADDRES}korzina/list/{call.from_user.id}').json()
    x = 0
    txt = 'üõíSavatdagi mahsulotlarni tekshirib kiyin `Rasmiylashtirish` ni bosing!!!\n\n'
    txt_rus = 'üõí–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª!!!\n\n'

    for i in data:
        price_int = int(i["price"])
        count_int = int(i["count"])
        total_price = price_int * count_int
        
        txt += f'üîπ<b>{i["product"]}</b>\n' \
            f'{count_int} x {price_int} = {total_price:,} \n\n'.replace(',', ' ')
        x += total_price
        
        txt_rus += f'üîπ<b>{i["product"]}</b>\n' \
                f'{count_int} x {price_int} = {total_price:,} \n\n'.replace(',', ' ')

    txt += f"<b>Umumiy:</b> {x:,} so'm".replace(',', ' ')
    txt_rus += f"<b>–û–±—â–∏–π:</b> {x:,} —Å—É–º".replace(',', ' ')
    but_uz.row(*(types.InlineKeyboardButton(f'‚úñÔ∏è{i["product"]}',
                                            callback_data=my_callback.new(item=f'id_{i["id"]}')) for i in data))
    but_uz.add(types.InlineKeyboardButton('‚ôªÔ∏èTozalash', callback_data=my_callback.new(item='clear')))
    but_uz.add(types.InlineKeyboardButton('‚úÖ Rasmiylashtirish', callback_data=my_callback.new(item='order')))

    but_ru.row(*(types.InlineKeyboardButton(f'‚úñÔ∏è{i["product"]}',
                                            callback_data=my_callback.new(item=f'id_{i["id"]}')) for i in data))
    but_ru.add(types.InlineKeyboardButton('‚ôªÔ∏è–£–±–æ—Ä–∫–∞', callback_data=my_callback.new(item='clear')))
    but_ru.add(types.InlineKeyboardButton('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data=my_callback.new(item='order')))
    try:
        lang = users[call.from_user.id].get('lang', '-')
        if lang == 'rus':
            await dp.bot.edit_message_text(text=txt_rus, chat_id=call.message.chat.id,
                                           message_id=call.message.message_id, reply_markup=but_ru)
        else:
            await dp.bot.edit_message_text(text=txt, chat_id=call.message.chat.id,
                                           message_id=call.message.message_id, reply_markup=but_uz)

    except:
        lang = users[call.from_user.id].get('lang', '-')
        if lang == 'rus':
            await dp.bot.edit_message_text(text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É',
                                           chat_id=call.message.chat.id,
                                           message_id=call.message.message_id, reply_markup=but_ru)
        else:
            await dp.bot.edit_message_text(text='Korzina bo\'sh, Mahsulotlarni tanlang va korzinaga qo\'shing',
                                           chat_id=call.message.chat.id,
                                           message_id=call.message.message_id, reply_markup=but_uz)
        await OrderData.category.set()


@dp.message_handler(state=RegOrderData.pay)
async def regorder(message: Message, state: FSMContext):
    lang = users[message.from_user.id].get('lang', '-')
    if message.text == '‚¨ÖÔ∏è Orqaga' or message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if lang == 'rus':
            await message.answer('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu_rus)
        else:
            await message.answer('üè† Bosh menu', reply_markup=menu)
        await state.finish()

    elif message.text == 'üí≥ Click':
        await state.update_data(
            {"pay": message.text}
        )

        if lang == 'rus':
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ü—Ä–∏–º–µ—Ä: +998940938189',
                                 reply_markup=number_rus)
        else:
            await message.answer('Telefon raqamingizni yuboring yoki kiriting Misol: +998940938189',
                                 reply_markup=number)
        await RegOrderData.number.set()

    elif message.text == 'üíµ Naqd' or message.text == 'üíµ –ù–∞–ª–∏—á–Ω—ã–µ':
        await state.update_data(
            {"pay": message.text}
        )
        if lang == 'rus':
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ü—Ä–∏–º–µ—Ä: +998940938189',
                                 reply_markup=number_rus)
        else:
            await message.answer('Telefon raqamingizni yuboring yoki kiriting Misol: +998940938189',
                                 reply_markup=number)

        await RegOrderData.number.set()


@dp.message_handler(state=RegOrderData.number)
@dp.message_handler(content_types='contact', state=RegOrderData.number)
async def regordernum(message: Message, state: FSMContext):
    lang = users[message.from_user.id].get('lang', '-')

    if message.text == '‚¨ÖÔ∏è Orqaga' or message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if lang == 'rus':
            await message.answer('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞', reply_markup=ordbut_rus)
        else:
            await message.answer('To`lov turini yuboring', reply_markup=ordbut)
        await RegOrderData.pay.set()

    elif message.contact.phone_number:
        await state.update_data(
            {"number": message.contact.phone_number}
        )
        if lang == 'rus':
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=delevery_rus)
        else:
            await message.answer('Yetkazib berish turini tanlang', reply_markup=delevery)
        await RegOrderData.delivery.set()
    elif len(message.text) == 12 or len(message.text) == 13:
        await state.update_data(
            {"number": message.text}
        )
        if lang == 'rus':
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=delevery_rus)
        else:
            await message.answer('Yetkazib berish turini tanlang', reply_markup=delevery)
        await RegOrderData.delivery.set()
    else:
        if lang == 'rus':
            await message.answer("–ù–æ–º–µ—Ä –æ—à–∏–±–∫–∏!", reply_markup=number_rus)
        else:
            await message.answer("–ù–æ–º–µ—Ä –æ—à–∏–±–∫–∏!", reply_markup=number)
        await RegOrderData.number.set()


@dp.message_handler(state=RegOrderData.delivery)
async def regorder2(message: Message, state: FSMContext):
    lang = users[message.from_user.id].get('lang', '-')
    data = requests.get(f'{ADDRES}korzina/list/{message.from_user.id}').json()
    txt = ''
    txt_rus = ''
    x = 0

    for i in data:
        price_int = int(i["price"])
        count_int = int(i["count"])
        total_price = price_int * count_int
        
        txt += f'<b>{i["product"]}</b>\n' \
            f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
        
        txt_rus += f'<b>{i["product"]}</b>\n' \
                f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
        
        x += total_price
    txt += f"<b>Umumiy:</b> {x:,} so'm".replace(',', ' ')
    txt_rus += f"<b>–û–±—â–∏–π:</b> {x:,} —Å—É–º".replace(',', ' ')
    if message.text == '‚¨ÖÔ∏è Orqaga' or message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if lang == 'rus':
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ü—Ä–∏–º–µ—Ä: +998940938189',
                                 reply_markup=number_rus)
        else:
            await message.answer('Telefon raqamingizni yuboring yoki kiriting Misol: +998940938189',
                                 reply_markup=number)
        await RegOrderData.number.set()
    elif message.text == 'üè´ Olib ketish' or message.text == 'üè´ –°–∞–º–æ–≤—ã–≤–æ–∑':
        await state.update_data(
            {"delevery": message.text}
        )
        data = await state.get_data()
        pay = data.get("pay")
        delever = data.get("delevery")
        text = f"<b>Sizning buyurtmangiz</b>\nNomer:{data.get('number')}\nTo'lov:{pay}\nYetkazib berish:{delever}"
        text_rus = f"<b>–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å</b>\n–ù–æ–º–µ—Ä:{data.get('number')}\n–û–ø–ª–∞—Ç–∞:{pay}\n–î–æ—Å—Ç–∞–≤–∫–∞:{delever}"
        if lang == 'rus':
            await message.answer(f'{text_rus}\n\n{txt_rus},', reply_markup=checkbutton_rus)
        else:
            await message.answer(f'{text}\n\n{txt},', reply_markup=checkbutton)
        await RegOrderData.location.set()
    elif message.text == 'üõµ Yetkazib berish' or message.text == 'üõµ –î–æ—Å—Ç–∞–≤–∫–∞':
        await state.update_data(
            {"delevery": message.text}
        )
        if lang == 'rus':
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –õ–æ–∫–∞—Ç—Ü–∏—é', reply_markup=location_rus)
        else:
            await message.answer(f'Manzilni kiriting, tekst yoki lokatsiya yuboring', reply_markup=location)
        await RegOrderData.location.set()


@dp.message_handler(content_types='location', state=RegOrderData.location)
@dp.message_handler(content_types='text', state=RegOrderData.location)
async def regorder2(message: Message, state: FSMContext):
    data = requests.get(f'{ADDRES}korzina/list/{message.from_user.id}').json()
    date = datetime.now(pytz.timezone('Asia/Tashkent')).strftime('%Y-%m-%d, %H:%M')
    lang = users[message.from_user.id].get('lang', '-')
    if message.text == '‚¨ÖÔ∏è Orqaga' or message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if lang == 'rus':
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=delevery_rus)
        else:
            await message.answer('Yetkazib berish turini tanlang', reply_markup=delevery)

        await RegOrderData.delivery.set()

    elif message.text == '‚úÖ Buyurtmani tasdiqlash' or message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑':
        if lang == 'rus':
            await message.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è", reply_markup=menu_rus)
        else:
            await message.answer("Buyurtma qabul qilindi! Tez orada siz bilan bog'lanamiz", reply_markup=menu)
        txt = ''
        x = 0
        product = ''
        price = 0

        for i in data:
            price_int = int(i["price"])
            count_int = int(i["count"])
            total_price = price_int * count_int
            
            txt += f'<b>{i["product"]}</b>\n' \
                f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
            
            x += total_price
            product += f'{i["product"]}: {count_int} x {price_int} = {total_price:,}, '.replace(',', ' ')
            price += total_price

        txt += f"<b>Umumiy:</b> {x:,} so'm".replace(',', ' ')
        db = await state.get_data()
        pay = db.get("pay")
        num = db.get("number")
        delever = db.get("delevery")
        com = ''
        address = ''
        if db.get("comment"):
            com += f'\n<b>Izoh</b>: {db.get("comment")}'
        res = Create_order(product, price, address, num, message.from_user.id)
        text = f"<b>Yangi buyurtma {date}</b>\n\nID: #{res[1]}A\n" \
               f"<b>User: </b> <a href='tg://user?id={message.from_user.id}'>" \
               f"{message.from_user.first_name} @{message.from_user.username} </a>\n" \
               f"Nomer: <a href='tel:{num}'>{num}</a>\nTo'lov:{pay}\nYetkazib berish:{delever}\n{com}\n{txt}"
        if db.get("address"):
            address = db.get("address")
            text = f"<b>Yangi buyurtma  {date}</b>\n\nID: #{res[1]}A\n<b>User: </b><a href='tg://user?id={message.from_user.id}'>" \
                   f"{message.from_user.first_name} @{message.from_user.username} </a>\n" \
                   f"Nomer: {num}\nTo'lov: {pay}\n" \
                   f"Yetkazib berish: {delever}\nManzil: {db.get('address')}\n{com}\n{txt}"

        for admin in ADMINS:
            if db.get("latitude") and db.get("longitude"):
                await dp.bot.send_location(admin, latitude=db.get("latitude"), longitude=db.get("longitude"))
            await dp.bot.send_message(admin, text, parse_mode='HTML',
                                      reply_markup=adminbut(chat_id=message.from_user.id,
                                                            lang=lang, id=res[1])
                                      )
        await state.finish()

    elif message.text == '‚ùå Bekor qilish' or message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        if lang == 'rus':
            await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu_rus)
        else:
            await message.answer("Buyurtma bekor qilindi", reply_markup=menu)
        await state.finish()

    elif message.text == 'üí¨ Buyurtmaga kommentariy' or message.text == 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É':
        if lang == 'rus':
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=comback_rus)
        else:
            await message.answer("Izoh kiriting", reply_markup=comback)
        await RegOrderData.comment.set()

    elif message.location:
        address = get_address_from_coords(f"{message.location.longitude}, {message.location.latitude},")
        await state.update_data(
            {
                "address": address,
                "longitude": message.location.longitude,
                "latitude": message.location.latitude,
            }
        )
        txt = ''
        txt_rus = ''
        x = 0

        for i in data:
            price_int = int(i["price"])
            count_int = int(i["count"])
            total_price = price_int * count_int
            
            txt += f'<b>{i["product"]}</b>\n' \
                f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
            
            txt_rus += f'<b>{i["product"]}</b>\n' \
                    f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
            
            x += total_price

        txt += f"<b>Umumiy:</b> {x:,} so'm".replace(',', ' ')
        txt_rus += f"<b>–û–±—â–∏–π:</b> {x:,} —Å—É–º".replace(',', ' ')
        data = await state.get_data()
        pay = data.get("pay")
        num = data.get("number")
        delever = data.get("delevery")
        text = f"<b>Sizning buyurtmangiz</b>\nNomer:{num}\nTo'lov:{pay}\nYetkazib berish:{delever}\nManzil:{address}"
        text_rus = f"<b>–í–∞—à –∑–∞–∫–∞–∑</b>\n–ù–æ–º–µ—Ä:{num}\n–æ–ø–ª–∞—Ç–∞:{pay}\n–î–æ—Å—Ç–∞–≤–∫–∞:{delever}\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:{address}"
        if lang == 'rus':
            await message.answer(f'{text_rus}\n\n{txt_rus},', reply_markup=checkbutton_rus)
        else:
            await message.answer(f'{text}\n\n{txt},', reply_markup=checkbutton)
        await RegOrderData.location.set()

    else:
        await state.update_data(
            {"address": message.text}
        )
        txt = ''
        txt_rus = ''
        x = 0

        for i in data:
            price_int = int(i["price"])
            count_int = int(i["count"])
            total_price = price_int * count_int
            
            txt += f'<b>{i["product"]}</b>\n' \
                f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
            
            txt_rus += f'<b>{i["product"]}</b>\n' \
                    f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
            
            x += total_price

        txt += f"<b>Umumiy:</b> {x:,} so'm".replace(',', ' ')
        txt_rus += f"<b>–û–±—â–∏–π:</b> {x:,} —Å—É–º".replace(',', ' ')
        data = await state.get_data()
        pay = data.get("pay")
        num = data.get("number")
        delever = data.get("delevery")
        address = data.get("address")
        text = f"<b>Sizning buyurtmangiz</b>\nNomer:{num}\nTo'lov:{pay}\nYetkazib berish:{delever}\nManzil:{address}"
        text_rus = f"<b>–í–∞—à –∑–∞–∫–∞–∑</b>\n–ù–æ–º–µ—Ä:{num}\n–æ–ø–ª–∞—Ç–∞:{pay}\n–î–æ—Å—Ç–∞–≤–∫–∞:{delever}\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:{address}"
        if lang == 'rus':
            await message.answer(f'{text_rus}\n\n{txt_rus},', reply_markup=checkbutton_rus)
        else:
            await message.answer(f'{text}\n\n{txt},', reply_markup=checkbutton)
        await RegOrderData.location.set()


@dp.message_handler(state=RegOrderData.comment)
async def regorder3(message: Message, state: FSMContext):
    lang = users[message.from_user.id].get('lang', '-')
    data = requests.get(f'{ADDRES}korzina/list/{message.from_user.id}').json()
    txt = ''
    txt_rus = ''
    x = 0

    for i in data:
        price_int = int(i["price"])
        count_int = int(i["count"])
        total_price = price_int * count_int
        
        txt += f'<b>{i["product"]}</b>\n' \
            f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
        
        txt_rus += f'<b>{i["product"]}</b>\n' \
                f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
        
        x += total_price

    txt += f"<b>Umumiy:</b> {x:,} so'm".replace(',', ' ')
    txt_rus += f"<b>–û–±—â–∏–π:</b> {x:,} —Å—É–º".replace(',', ' ')
    data = await state.get_data()
    pay = data.get("pay")
    delever = data.get("delevery")
    text = f"<b>Sizning buyurtmangiz</b>\nNomer:{data.get('number')}\nTo'lov:{pay}\nYetkazib berish:{delever}\n"
    text_rus = f"<b>–í–∞—à –∑–∞–∫–∞–∑</b>\n–ù–æ–º–µ—Ä:{data.get('number')}\n–æ–ø–ª–∞—Ç–∞:{pay}\n–î–æ—Å—Ç–∞–≤–∫–∞:{delever}"
    if data.get("address"):
        text = f"<b>Sizning buyurtmangiz</b>\nNomer:{data.get('number')}\nTo'lov:{pay}\nYetkazib berish:{delever}\nManzil:{data.get('address')}\n"
        text_rus = f"<b>–í–∞—à –∑–∞–∫–∞–∑</b>\n–ù–æ–º–µ—Ä:{data.get('number')}\n–æ–ø–ª–∞—Ç–∞:{pay}\n–î–æ—Å—Ç–∞–≤–∫–∞:{delever}–ê–¥—Ä–µ—Å:{data.get('address')}\n"

    if message.text == '‚¨ÖÔ∏è Orqaga' or message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if lang == 'rus':
            await message.answer(f'{text_rus}\n{txt_rus},', reply_markup=checkbutton_rus)
        else:
            await message.answer(f'{text}\n{txt},', reply_markup=checkbutton)
        await RegOrderData.location.set()
    else:
        await state.update_data(
            {"comment": message.text}
        )
        if lang == 'rus':
            await message.answer(f'{text_rus}\n<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</b>: {message.text}\n\n{txt_rus}',
                                 reply_markup=checkbutton_rus)
        else:
            await message.answer(f'{text}\n<b>Izoh</b>: {message.text}\n\n{txt}', reply_markup=checkbutton)
        await RegOrderData.confirm.set()


@dp.message_handler(content_types='text', state=RegOrderData.confirm)
async def regorder4(message: Message, state: FSMContext):
    lang = users[message.from_user.id].get('lang', '-')
    data = requests.get(f'{ADDRES}korzina/list/{message.from_user.id}').json()
    date = datetime.now(pytz.timezone('Asia/Tashkent')).strftime('%Y-%m-%d, %H:%M')
    if message.text == '‚¨ÖÔ∏è Orqaga' or message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if lang == 'rus':
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=delevery_rus)
        else:
            await message.answer('Yetkazib berish turini tanlang', reply_markup=delevery)
        await RegOrderData.delivery.set()

    elif message.text == '‚úÖ Buyurtmani tasdiqlash' or message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑':
        if lang == 'rus':
            await message.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è", reply_markup=menu_rus)
        else:
            await message.answer("Buyurtma qabul qilindi! Tez orada siz bilan bog'lanamiz", reply_markup=menu)
        txt = ''
        x = 0
        product = ''
        price = 0

        for i in data:
            price_int = int(i["price"])
            count_int = int(i["count"])
            total_price = price_int * count_int
            
            txt += f'<b>{i["product"]}</b>\n' \
                f'{count_int} x {price_int} = {total_price:,}\n'.replace(',', ' ')
            
            x += total_price
            
            product += f'{i["product"]}: ' \
                    f'{count_int} x {price_int} = {total_price:,}, '.replace(',', ' ')
            
            price += total_price

        txt += f"<b>Umumiy:</b> {x:,} so'm".replace(',', ' ')
        db = await state.get_data()
        pay = db.get("pay")
        num = db.get("number")
        delever = db.get("delevery")
        com = ''
        address = ''
        res = Create_order(product, price, address, num, message.from_user.id)
        if db.get("comment"):
            com += f'<b>Izoh</b>: {db.get("comment")}'
        text = f"<b>Yangi buyurtma {date}</b>\n\nID: #{res[1]}A\n<b>User: </b> <a href='tg://user?id={message.from_user.id}'>" \
               f"{message.from_user.first_name} @{message.from_user.username} </a>\n" \
               f"Nomer: <a href='tel:{num}'>{num}</a>\nTo'lov:{pay}\nYetkazib berish:{delever}\n{com}\n{txt}"
        if db.get("address"):
            address = db.get("address")
            text = f"<b>Yangi buyurtma {date}</b>\n\nID:#{res[1]}A\n<b>User: </b><a href='tg://user?id={message.from_user.id}'>" \
                   f"{message.from_user.first_name} @{message.from_user.username} </a>\n" \
                   f"Nomer: {num}\nTo'lov: {pay}\n" \
                   f"Yetkazib berish: {delever}\nManzil: {db.get('address')}\n\n{com}\n\n{txt}"

        for admin in ADMINS:
            if db.get("latitude") and db.get("longitude"):
                await dp.bot.send_location(admin, latitude=db.get("latitude"), longitude=db.get("longitude"))
            await dp.bot.send_message(admin, text, parse_mode='HTML',
                                      reply_markup=adminbut(chat_id=message.from_user.id,
                                                            lang=lang, id=res[1]))

        await state.finish()

    elif message.text == '‚ùå Bekor qilish' or message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        if lang == 'rus':
            await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu_rus)
        else:
            await message.answer("Buyurtma bekor qilindi", reply_markup=menu)
        await state.finish()

    elif message.text == 'üí¨ Buyurtmaga kommentariy' or message.text == 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É':
        if lang == 'rus':
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=comback_rus)
        else:
            await message.answer("Izoh kiriting", reply_markup=comback)
        await RegOrderData.comment.set()
